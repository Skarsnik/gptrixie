use XML;
use GPT::Class;
use GPT::DumbGenerator;
#use OOGenerator;


my %types;
my %fields;
my %struct;
my @cfunctions;
my @cenums;
my %cunions;

sub MAIN($header-file, Bool :$all, Str :$ooc, Bool :$enums, Bool :$functions, Bool :$structs, *@other) {
  do-magic($header-file, @other);
  
  dg-init(%types, %fields, %struct, @cfunctions, @cenums, %cunions);
  #if $ooc {
  #  oog-config($ooc);
  #  oog-generate();
  #}
  if $enums {
    dg-generate-enums(@cenums);
  }
  if $functions {
    my %h = dg-generate-functions();
    for %h.values -> $v {
       say $v;
    }
  }
  if $structs {
    my %h = dg-generate-structs();
    for %h.values -> $v {
       say $v;
    }
  }
}






sub do-magic($header, @other) {

  say "gccxml $header -fxml=plop.xml";
  run "gccxml",  $header, "-fxml=plop.xml", @other;

  my $xml = from-xml-file('plop.xml');

  my @xmlfields = $xml.lookfor(:TAG<Field>);
  my @xmlFundtypes = $xml.lookfor(:TAG<FundamentalType>);
  my @xmlPointertypes = $xml.lookfor(:TAG<PointerType>);
  my @xmlQualtypes = $xml.lookfor(:TAG<CvQualifiedType>);
  my @xmlTypesdef = $xml.lookfor(:TAG<Typedef>);
  my @xmlFunctionTypes = $xml.lookfor(:TAG<FunctionType>);
  my @xmlArrayTypes = $xml.lookfor(:TAG<ArrayType>);
  my @xmlUnion = $xml.lookfor(:TAG<Union>);
  my @xmlFunctions = $xml.lookfor(:TAG<Function>, :name(* !~~ /^__/));


  #Gather type
  for @xmlFundtypes -> $ft {
    my FundamentalType $t .= new(:id($ft.attribs<id>));
    $t.name = $ft.attribs<name>;
    %types{$t.id} = $t;
  }

  for @xmlFunctionTypes -> $ft {
    my FunctionType $t .= new(:id($ft.attribs<id>));
    %types{$t.id} = $t;
  }

  for @xmlPointertypes -> $ft {
    my PointerType $t .= new(:id($ft.attribs<id>));
    $t.ref-id = $ft.attribs<type>;
    %types{$t.id} = $t;
  }

  for @xmlQualtypes -> $ft {
    my QualifiedType $t .= new(:id($ft.attribs<id>));
    $t.ref-id = $ft.attribs<type>;
    %types{$t.id} = $t;
  }

  for @xmlTypesdef -> $ft {
    my TypeDefType $t .= new(:id($ft.attribs<id>));
    $t.ref-id = $ft.attribs<type>;
    $t.name = $ft.attribs<name>;
    %types{$t.id} = $t;
  }
  for @xmlArrayTypes -> $ft {
    my ArrayType $t .= new(:id($ft.attribs<id>));
    $t.ref-id = $ft.attribs<type>;
    %types{$t.id} = $t;
  }

  for @xmlfields -> $field {
    my $pf = Field.new();
    $pf.name = $field.attribs<name>;
    $pf.type-id = $field.attribs<type>;
    %fields{$field.attribs<id>} = $pf;
  }
  
  my @xmlStruct = $xml.lookfor(:TAG<Struct>);

  for @xmlStruct -> $xmls {
    my $s = Struct.new;
    $s.name = $xmls.attribs<name>;
    $s.id = $xmls.attribs<id>;
    if $xmls.attribs<members>.defined {
      my @rawmember = $xmls.attribs<members>.split(' ');
      for @rawmember {
        $s.fields.push(%fields{$_}) if %fields{$_}.defined;
      }
    }
    %struct{$s.id} = $s;
    my StructType $t .= new(:id($s.id), :name($s.name));
    %types{$t.id} = $t;
  }

  for @xmlUnion -> $ft {
    my UnionType $t .= new(:id($ft.attribs<id>));
    %types{$t.id} = $t;
    my CUnion $u .= new(:id($ft.attribs<id>));
    my @rm = $ft.attribs<members>.split(' ');
    for @rm -> $rm {
      $u.members.push(%fields{$rm}) if %fields{$rm}:exists;
    }
    $u.struct = %struct{$ft.attribs<context>};
    %cunions{$u.id} = $u;
    
  }

  my @xmlenum = $xml.lookfor(:TAG<Enumeration>);


  for @xmlenum -> $m {
    my CEnum $enum .= new(:id($m.attribs<id>), :name($m.attribs<name>));
    my EnumType $t .= new(:id($m.attribs<id>), :name($m.attribs<name>));
    %types{$t.id} = $t;
    for @($m.elements()) -> $enumv {
      my EnumValue $nv .= new(:name($enumv.attribs<name>), :init($enumv.attribs<init>));
      $enum.values.push($nv);
    }
    @cenums.push($enum);
  }

  #We probably can resolve every type now.
  sub resolvetype {
    my $change = True; #Do something like bubble sort, until we solve everytype, let's boucle
    while ($change) {
      $change = False;
      for %types.kv -> $id, $t {
	if $t ~~ IndirectType {
	  unless $t.ref-type:defined {
	    #say "Found an undef indirect id: "~ $t.ref-id;
	    $t.ref-type = %types{$t.ref-id};
	    $change = True;
	  }
	}
      }
    }
  }
  resolvetype();

  for @xmlFunctions -> $func {
    my Function $f .= new(:name($func.attribs<name>), :id($func.attribs<id>));
    $f.returns = %types{$func.attribs<returns>};
    for @($func.elements()) -> $param {
      next if $param.name ne 'Argument';
      my FunctionArgument $a .= new(:name($param.attribs<name>));
      $a.type = %types{$param.attribs<type>};
      $f.arguments.push($a);
    }
    @cfunctions.push($f);
  }

  # say "List type";
  # for %types.kv -> $k, $v {
  #   say $v.id ~ ':' ~ $v.Str;
  # }

  for %fields.kv ->  $id, $f {
    $f.type = %types{$f.type-id};
    if $f.type ~~ UnionType {
      %cunions{$f.type.id}.field = $f;
    }
  }
  for %cunions.kv -> $k, $cu {
    $cu.gen-name = $cu.struct.name ~ "_" ~ $cu.field.name ~ "_Union";
    say $cu.gen-name;
  }

}

# say "\n==CSTRUCT==";
# for %struct.kv -> $k, $v {
#   say "-$k : {$v.name}";
#   for $v.fields -> $f {
#     say "   {$f.type.Str} ({$f.type-id})  '{$f.name}'";
#   }
# }
# 
# say "==FUNCTIONS==";
# 
# for @cfunctions -> $f {
#   my @tmp;
#   for $f.arguments -> $a {
#     @tmp.push($a.type ~ ' ' ~ $a.name);
#   }
#   say $f.returns ~ "\t\t" ~ $f.name ~ '(' ~ @tmp.join(', ') ~ ')';
# }

