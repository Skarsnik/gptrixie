use XML;
use GPT::Class;
use GPT::DumbGenerator;
#use OOGenerator;






sub MAIN($header-file, Bool :$all, Str :$define-enum, Str :$ooc, Bool :$enums, Bool :$functions, Bool :$structs, Str :$func-prefix, *@other) {

  if $define-enum.defined and ! $define-enum.index(':').defined {
      die "The define-enum option must be of the form enumname:pattern";
  }
  my AllTheThings $att = do-magic($header-file, @other);
  note "Time to generate stuff\n\n";


  #if $ooc {
  #  oog-config($ooc);
  #  oog-generate();
  #}
  if $define-enum {
    my ($enum-name, $enum-pattern) := $define-enum.split(':');
    my CEnum $e .= new(:name($enum-name), :id(-1));
    for $att.files.kv -> $k, $v {
      if $v.IO.basename ne 'gccxml_builtins.h' and $v.IO.basename !~~ /^std/ {
        my $fh = open $v;
        for $fh.lines -> $line {
          if $line ~~ /^"#"\s*"define" \s+ ($enum-pattern.+) \s+ (.+)/ {
            my EnumValue $ev .= new;
            $ev.name = $0;
            $ev.init = $1;
            $e.values.push($ev);
          }
        }
      }
    }
    if $e.values.elems !== 0 {
      $att.enums.push($e);
    }
  }
  dg-init($att);
  if $enums or $all or $define-enum {
    dg-generate-enums();
  }
  if $functions or $all {
    my %h = dg-generate-functions();
    for %h.keys.sort -> $func-name {
      my $sub-def = %h{$func-name};
      if $func-prefix && ! $func-name.starts-with($func-prefix) {
        next;
      }
      say $sub-def;
    }
  }
  if $structs or $all {
    my %h = dg-generate-structs();
    for %h.values -> $v {
       say $v;
    }
  }
}






sub do-magic($header, @other) {
  my %types;
  my %fields;
  my %struct;
  my @cfunctions;
  my @cenums;
  my %cunions;
  my %files;

  my %times;

  my $t = now;
  note "Calling GCCXML : gccxml $header -fxml=plop.xml";
  run "gccxml",  $header, "-fxml=plop.xml", @other;
  %times<gccxml> = now - $t;
  $t = now;
  note "Parsing the XML file";
  my $xml = from-xml-file('plop.xml');
  %times<parse-xml> = now - $t;
  $t = now;
  note "Doing magic";
  my @xmlFiles = $xml.lookfor(:TAG<File>);
  #say '@xmlFiles: ' ~ @xmlFiles;
  my @xmlfields = $xml.lookfor(:TAG<Field>);
  my @xmlFundtypes = $xml.lookfor(:TAG<FundamentalType>);
  my @xmlPointertypes = $xml.lookfor(:TAG<PointerType>);
  my @xmlQualtypes = $xml.lookfor(:TAG<CvQualifiedType>);
  my @xmlTypesdef = $xml.lookfor(:TAG<Typedef>);
  my @xmlFunctionTypes = $xml.lookfor(:TAG<FunctionType>);
  my @xmlArrayTypes = $xml.lookfor(:TAG<ArrayType>);
  my @xmlUnion = $xml.lookfor(:TAG<Union>);
  my @xmlFunctions = $xml.lookfor(:TAG<Function>, :name(* !~~ /^__/));

  for @xmlFiles -> $ft {
    %files{$ft.attribs<id>} = $ft.attribs<name>;
  }


  #Gather type
  for @xmlFundtypes -> $ft {
    my FundamentalType $t .= new(:id($ft.attribs<id>));
    $t.name = $ft.attribs<name>;
    %types{$t.id} = $t;
  }

  for @xmlFunctionTypes -> $ft {
    my FunctionType $t .= new(:id($ft.attribs<id>));
    %types{$t.id} = $t;
  }

  for @xmlPointertypes -> $ft {
    my PointerType $t .= new(:id($ft.attribs<id>));
    $t.ref-id = $ft.attribs<type>;
    %types{$t.id} = $t;
  }

  for @xmlQualtypes -> $ft {
    my QualifiedType $t .= new(:id($ft.attribs<id>));
    $t.ref-id = $ft.attribs<type>;
    %types{$t.id} = $t;
  }

  for @xmlTypesdef -> $ft {
    my TypeDefType $t .= new(:id($ft.attribs<id>));
    $t.ref-id = $ft.attribs<type>;
    $t.name = $ft.attribs<name>;
    %types{$t.id} = $t;
  }
  for @xmlArrayTypes -> $ft {
    my $size = $ft.attribs<max>.subst('u', '') eq "0xffffffffffffffff" ?? '' !! $ft.attribs<max>.subst('u', '') + 1;
    my ArrayType $t .= new(:id($ft.attribs<id>), :size($size));
    $t.ref-id = $ft.attribs<type>;
    %types{$t.id} = $t;
  }

  #Gather 'real' stuff

  for @xmlfields -> $field {
    my $pf = Field.new();
    $pf.set-clocation($field);
    $pf.file = %files{$pf.file-id};
    $pf.name = $field.attribs<name>;
    $pf.type-id = $field.attribs<type>;
    %fields{$field.attribs<id>} = $pf;
  }

  my @xmlStruct = $xml.lookfor(:TAG<Struct>);

  for @xmlStruct -> $xmls {
    my $s = Struct.new;
    $s.name = $xmls.attribs<name>;
    $s.id = $xmls.attribs<id>;
    $s.set-clocation($xmls);
    $s.file = %files{$s.file-id};
    if $xmls.attribs<members>.defined {
      my @rawmember = $xmls.attribs<members>.split(' ');
      for @rawmember {
        $s.fields.push(%fields{$_}) if %fields{$_}.defined;
      }
    }
    %struct{$s.id} = $s;
    my StructType $t .= new(:id($s.id), :name($s.name));
    %types{$t.id} = $t;
  }

  for @xmlUnion -> $ft {
    my UnionType $t .= new(:id($ft.attribs<id>));
    %types{$t.id} = $t;
    my CUnion $u .= new(:id($ft.attribs<id>));
    my @rm = $ft.attribs<members>.split(' ');
    for @rm -> $rm {
      $u.members.push(%fields{$rm}) if %fields{$rm}:exists;
    }
    $u.struct = %struct{$ft.attribs<context>};
    %cunions{$u.id} = $u;

  }

  my @xmlenum = $xml.lookfor(:TAG<Enumeration>);


  for @xmlenum -> $m {
    my CEnum $enum .= new(:id($m.attribs<id>), :name($m.attribs<name>));
    my EnumType $t .= new(:id($m.attribs<id>), :name($m.attribs<name>));
    %types{$t.id} = $t;
    $enum.set-clocation($m);
    $enum.file = %files{$enum.file-id};
    for @($m.elements()) -> $enumv {
      my EnumValue $nv .= new(:name($enumv.attribs<name>), :init($enumv.attribs<init>));
      $enum.values.push($nv);
    }
    @cenums.push($enum);
  }

  #We probably can resolve every type now.
  sub resolvetype {
    my $change = True; #Do something like bubble sort, until we solve everytype, let's boucle
    while ($change) {
      $change = False;
      for %types.kv -> $id, $t {
	if $t ~~ IndirectType {
	  unless $t.ref-type:defined {
	    #say "Found an undef indirect id: "~ $t.ref-id;
	    $t.ref-type = %types{$t.ref-id};
	    $change = True;
	  }
	}
      }
    }
  }
  resolvetype();

  for @xmlFunctions -> $func {
    my Function $f .= new(:name($func.attribs<name>), :id($func.attribs<id>));
    $f.returns = %types{$func.attribs<returns>};
    $f.set-clocation($func);
    $f.file = %files{$f.file-id};
    for @($func.elements()) -> $param {
      next if $param.name ne 'Argument';
      my FunctionArgument $a .= new(:name($param.attribs<name>));
      $a.set-clocation($param);
      $a.file = %files{$a.file-id};
      $a.type = %types{$param.attribs<type>};
      $f.arguments.push($a);
    }
    @cfunctions.push($f);
  }

  # say "List type";
  # for %types.kv -> $k, $v {
  #   say $v.id ~ ':' ~ $v.Str;
  # }

  for %fields.kv ->  $id, $f {
    $f.type = %types{$f.type-id};
    if $f.type ~~ UnionType {
      %cunions{$f.type.id}.field = $f;
    }
  }
  for %cunions.kv -> $k, $cu {
    if ! $cu.struct.defined || ! $cu.field.defined {
        warn "Got a weird cunion";
        next;
    }
    say 'cu struct name = ' ~ $cu.struct.name;
    say 'cu field name = ' ~ $cu.field.name;
    $cu.gen-name = $cu.struct.name ~ "_" ~ $cu.field.name ~ "_Union";
  }

  %times<magic> = now - $t;
  note "Times -- gccxml: %times<gccxml> sec; xml parsing: %times<parse-xml> sec; magic: %times<magic>";
   my $att = AllTheThings.new;
   $att.files = %files;
   $att.types = %types;
   $att.functions = @cfunctions;
   $att.enums = @cenums;
   $att.structs = %struct;
   $att.unions = %cunions;
   return $att;
}

# say "\n==CSTRUCT==";
# for %struct.kv -> $k, $v {
#   say "-$k : {$v.name}";
#   for $v.fields -> $f {
#     say "   {$f.type.Str} ({$f.type-id})  '{$f.name}'";
#   }
# }
#
# say "==FUNCTIONS==";
#
# for @cfunctions -> $f {
#   my @tmp;
#   for $f.arguments -> $a {
#     @tmp.push($a.type ~ ' ' ~ $a.name);
#   }
#   say $f.returns ~ "\t\t" ~ $f.name ~ '(' ~ @tmp.join(', ') ~ ')';
# }

